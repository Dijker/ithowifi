#pragma once

const uint8_t itho_14v1_4[]   {0, 1, 2, 3, 4, 5, 6, 7, 102, 103, 255};
const uint8_t itho_14v5[]     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 48, 49, 50, 51, 96, 52, 53, 97, 98, 99, 100, 101, 102, 103, 255};
const uint8_t itho_14v6[]     {0, 1, 2, 3, 4, 5, 6, 7, 26, 48, 49, 50, 51, 96, 52, 53, 97, 98, 99, 100, 101, 102, 103, 255};


const uint8_t itho_1Bv6[]     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 48, 49, 50, 51, 96, 52, 53, 97, 98, 99, 100, 101, 102, 103, 255};
const uint8_t itho_1Bv7[]     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 26, 48, 49, 50, 51, 96, 52, 53, 97, 98, 99, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 255};
const uint8_t itho_1Bv8[]     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 104, 17, 18, 19, 26, 48, 49, 50, 51, 96, 52, 53, 97, 98, 99, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 255};
const uint8_t itho_1Bv9[]     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 104, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 48, 49, 50, 51, 96, 52, 53, 97, 98, 99, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 255};
const uint8_t itho_1Bv10[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 104, 17, 18, 19, 20, 21, 22, 23, 24, 25, 48, 49, 50, 51, 96, 52, 53, 97, 98, 99, 55, 56, 57, 58, 59, 61, 62, 63, 64, 105, 65, 66, 255};
const uint8_t itho_1Bv11[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 104, 17, 18, 19, 20, 21, 22, 23, 24, 25, 105, 48, 49, 50, 51, 96, 52, 53, 97, 98, 99, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 255};
const uint8_t itho_1Bv17[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 106, 30, 31, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 255};
const uint8_t itho_1Bv1820[]  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 255};
const uint8_t itho_1Bv21[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 255};
const uint8_t itho_1Bv22[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 65, 66, 255};
const uint8_t itho_1Bv24[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 255};
const uint8_t itho_1Bv25[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 255};
const uint8_t itho_1Bv2627[]  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 255};

const uint8_t itho_HRUecoFanv1_3[]       {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 255};
const uint8_t itho_HRUecoFanv4_5[]       {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 255};
const uint8_t itho_HRUecoFanv6[]         {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 255};
const uint8_t itho_HRUecoFanv7[]         {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 47, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 45, 41, 42, 43, 44, 255};
const uint8_t itho_HRUecoFanv8_9[]       {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 47, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 46, 45, 41, 42, 43, 44, 48, 49, 50, 255};
const uint8_t itho_HRUecoFanv10_12[]     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 47, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 37, 38, 39, 40, 46, 45, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 255};

const uint8_t itho_HRU350v1[]         {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 255};
const uint8_t itho_HRU350v3[]         {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 93, 81, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 85, 86, 87, 88, 89, 90, 91, 92, 255};

const uint8_t itho_DemandFlowv1_4[]   {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 255};
const uint8_t itho_DemandFlowv3[]     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 255};
const uint8_t itho_DemandFlowv6_7[]   {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 255};
const uint8_t itho_DemandFlowv8[]     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 255};
const uint8_t itho_DemandFlowv9_10[]  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 255};
const uint8_t itho_DemandFlowv11_12[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 255};
const uint8_t itho_DemandFlowv13[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 255};
const uint8_t itho_DemandFlowv14[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 255};
const uint8_t itho_DemandFlowv15[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 164, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 230, 231, 52, 53, 165, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 166, 167, 103, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 116, 117, 118, 186, 143, 144, 145, 146, 147, 149, 152, 150, 151, 184, 185, 155, 156, 157, 158, 159, 160, 180, 181, 182, 183, 161, 162, 163, 255};
const uint8_t itho_DemandFlowv16_17[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 164, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 230, 231, 52, 53, 165, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 167, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 116, 117, 118, 186, 143, 144, 145, 146, 147, 149, 152, 150, 151, 184, 185, 155, 156, 157, 158, 159, 160, 180, 181, 182, 183, 161, 162, 163, 187, 188, 255};
const uint8_t itho_DemandFlowv18[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 164, 25, 189, 26, 27, 28, 29, 30, 228, 229, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 230, 231, 52, 53, 165, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 167, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 116, 117, 143, 144, 145, 146, 147, 149, 152, 150, 151, 184, 185, 155, 156, 157, 158, 159, 160, 180, 181, 182, 183, 161, 162, 163, 187, 188, 190, 191, 192, 255};
const uint8_t itho_DemandFlowv19[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 164, 25, 189, 26, 27, 28, 29, 30, 228, 229, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 230, 231, 52, 53, 165, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 167, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 116, 117, 143, 144, 145, 146, 147, 149, 152, 150, 151, 184, 185, 155, 156, 157, 158, 159, 160, 180, 181, 182, 183, 161, 162, 163, 187, 188, 190, 191, 192, 193, 255};
const uint8_t itho_DemandFlowv20[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 164, 25, 189, 26, 27, 28, 29, 30, 228, 229, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 230, 231, 52, 53, 165, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 167, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 116, 117, 118, 143, 144, 145, 146, 147, 149, 152, 150, 151, 184, 185, 155, 156, 157, 158, 159, 160, 180, 181, 182, 183, 161, 162, 163, 187, 188, 190, 194, 191, 192, 193, 255};
const uint8_t itho_DemandFlowv21[]    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 164, 25, 189, 26, 27, 28, 29, 30, 228, 229, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 230, 231, 52, 53, 165, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 102, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 167, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 116, 117, 118, 143, 144, 145, 146, 147, 149, 152, 150, 151, 184, 185, 155, 156, 157, 158, 159, 160, 180, 181, 182, 183, 161, 162, 163, 187, 188, 190, 194, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 255};

const uint8_t *itho14SettingsMap[] =          { nullptr, itho_14v1_4, itho_14v1_4, itho_14v1_4, itho_14v1_4, itho_14v5, itho_14v6 };
const uint8_t *itho1BSettingsMap[] =          { nullptr, itho_1Bv6, itho_1Bv6, itho_1Bv6, itho_1Bv6, itho_1Bv6, itho_1Bv6, itho_1Bv7, itho_1Bv8, itho_1Bv9, itho_1Bv10, itho_1Bv11, nullptr, nullptr, nullptr, nullptr, nullptr, itho_1Bv17, itho_1Bv1820, nullptr, itho_1Bv1820, itho_1Bv21, itho_1Bv22, nullptr, itho_1Bv24, itho_1Bv25, itho_1Bv2627, itho_1Bv2627 };
const uint8_t *ithoHRUecoFanSettingsMap[] =   { nullptr, itho_HRUecoFanv1_3, itho_HRUecoFanv1_3, itho_HRUecoFanv1_3, itho_HRUecoFanv4_5, itho_HRUecoFanv4_5, itho_HRUecoFanv6, itho_HRUecoFanv7, itho_HRUecoFanv8_9, itho_HRUecoFanv8_9, itho_HRUecoFanv10_12, itho_HRUecoFanv10_12, itho_HRUecoFanv10_12 };
const uint8_t *ithoHRU350SettingsMap[] =      { nullptr, itho_HRU350v1, itho_HRU350v1, itho_HRU350v3 };
const uint8_t *ithoDemandFlowSettingsMap[] =  { nullptr, itho_DemandFlowv1_4, itho_DemandFlowv1_4, itho_DemandFlowv3, itho_DemandFlowv1_4, nullptr, itho_DemandFlowv6_7, itho_DemandFlowv6_7, itho_DemandFlowv8, itho_DemandFlowv9_10, itho_DemandFlowv9_10, itho_DemandFlowv11_12, itho_DemandFlowv11_12, itho_DemandFlowv13, itho_DemandFlowv14, itho_DemandFlowv15, itho_DemandFlowv16_17, itho_DemandFlowv16_17, itho_DemandFlowv18, itho_DemandFlowv19, itho_DemandFlowv20, itho_DemandFlowv21};


const uint8_t itho_14sv14[]   {0, 1, 2, 3, 4, 5, 6, 255};
const uint8_t itho_1Bsv57[]   {0, 1, 2, 3, 4, 5, 6, 8, 12, 13, 28, 14, 15, 255};
const uint8_t itho_1Bsv8[]    {0, 1, 2, 3, 4, 5, 6, 7, 27, 8, 12, 13, 28, 14, 15, 255};
const uint8_t itho_1Bsv911[]  {0, 1, 2, 3, 4, 5, 6, 7, 27, 8, 12, 13, 28, 14, 15, 29, 9, 29, 30, 31, 32, 255};
const uint8_t itho_1Bsv17[]   {0, 1, 2, 3, 4, 5, 6, 7, 27, 8, 9, 12, 13, 28, 14, 15, 255};
const uint8_t itho_1Bsv18[]   {0, 1, 2, 3, 4, 5, 6, 7, 27, 8, 9, 12, 13, 14, 15, 255};
const uint8_t itho_1Bsv2021[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 255};
const uint8_t itho_1Bsv22[]   {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 255};
const uint8_t itho_1Bsv2427[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255};

const uint8_t itho_HRUecoFansv2_4[]  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 255};
const uint8_t itho_HRUecoFansv6_7[]  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 255};
const uint8_t itho_HRUecoFansv8_12[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 255};

const uint8_t itho_HRU350sv13[]   {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 255};

const uint8_t itho_DemandFlowsv1[]     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 255};
const uint8_t itho_DemandFlowsv3[]     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 18, 61, 62, 63, 64, 65, 66, 255};
const uint8_t itho_DemandFlowsv4_12[]  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 18, 61, 62, 63, 64, 65, 66, 255};
const uint8_t itho_DemandFlowsv13[]    {67, 68, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 18, 61, 62, 63, 64, 65, 66, 255};
const uint8_t itho_DemandFlowsv14[]    {67, 68, 0, 1, 2, 3, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 18, 255};
const uint8_t itho_DemandFlowsv15_17[] {67, 68, 0, 1, 2, 3, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 4, 79, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 18, 61, 62, 63, 64, 65, 66, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 255};
const uint8_t itho_DemandFlowsv18_21[] {67, 68, 0, 1, 2, 3, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 4, 79, 5, 90, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 18, 61, 62, 63, 64, 65, 66, 91, 92, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 255};


const uint8_t *itho14StatusMap[] =          { nullptr, itho_14sv14, itho_14sv14, itho_14sv14, itho_14sv14, itho_1Bsv57, itho_1Bsv57, itho_1Bsv57 };
const uint8_t *itho1BStatusMap[] =          { nullptr, nullptr, nullptr, nullptr, nullptr, itho_1Bsv57, itho_1Bsv57, itho_1Bsv57, itho_1Bsv8, itho_1Bsv911, itho_1Bsv911, itho_1Bsv911, nullptr, nullptr, nullptr, nullptr, nullptr, itho_1Bsv17, itho_1Bsv18, nullptr, itho_1Bsv2021, itho_1Bsv2021, itho_1Bsv22, nullptr, itho_1Bsv2427, itho_1Bsv2427, itho_1Bsv2427, itho_1Bsv2427 };
const uint8_t *ithoHRUecoFanStatusMap[] =      { nullptr, itho_HRUecoFansv2_4, itho_HRUecoFansv2_4, itho_HRUecoFansv2_4, itho_HRUecoFansv2_4, nullptr, itho_HRUecoFansv6_7, itho_HRUecoFansv6_7, itho_HRUecoFansv8_12, itho_HRUecoFansv8_12, itho_HRUecoFansv8_12, itho_HRUecoFansv8_12, itho_HRUecoFansv8_12 };
const uint8_t *ithoHRU350StatusMap[] =      { nullptr, itho_HRU350sv13, nullptr, itho_HRU350sv13 };
const uint8_t *ithoDemandFlowStatusMap[] =  { nullptr, itho_DemandFlowsv1, nullptr, itho_DemandFlowsv3, itho_DemandFlowsv4_12, itho_DemandFlowsv4_12, itho_DemandFlowsv4_12, itho_DemandFlowsv4_12, itho_DemandFlowsv4_12, itho_DemandFlowsv4_12, itho_DemandFlowsv4_12, itho_DemandFlowsv4_12, itho_DemandFlowsv4_12, itho_DemandFlowsv13, itho_DemandFlowsv14, itho_DemandFlowsv15_17, itho_DemandFlowsv15_17, itho_DemandFlowsv15_17, itho_DemandFlowsv18_21, itho_DemandFlowsv18_21, itho_DemandFlowsv18_21, itho_DemandFlowsv18_21 };


const __FlashStringHelper *ihtoCVESettingsDescriptions[] =
{
  F("OEM number"),
  F("Print version (1 is high performance)"),
  F("Min setting of potentiometer low"),
  F("Max setting of potentiometer low"),
  F("Min setting of potentiometer high"),
  F("Max setting of potentiometer high"),
  F("RF enable"),
  F("I2C mode"),
  F("Fan constant Ca2"),
  F("Fan constant Ca1"),
  F("Fan constant Ca0"),
  F("Fan constant Cb2"),
  F("Fan constant Cb1"),
  F("Fan constant Cb0"),
  F("Fan constant cc2"),
  F("Fan constant cc1"),
  F("Fan constant Cc0"),
  F("Block time auto. reset absence"),
  F("Max. time deferred absence"),
  F("Min. time deferred absence"),
  F("PIR level 1"),
  F("PIR level 2"),
  F("PIR level 1 waiting time"),
  F("PIR level 2 waiting time"),
  F("PIR level 1 running time"),
  F("PIR level 2 running time"),
  F("Minimum ventilation level in Auto without CO2 sensor"),
  F("Max time in high"),
  F("Max time in low or middle"),
  F("Mode after maximum time high"),
  F("CO2 value air quality moderate, Display in spIDer"),
  F("CO2 value air quality good, Display in spIDer"),
  F("Type of dwelling, 1 = apartment; 2 = family home"),
  F("Number of occupants, 3 and more occupants = 3"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto Night mode"),
  F("Minimum ventilation speed during Auto mode"),
  F("Minimum ventilation speed during Auto mode"),
  F("CO2 value absent"),
  F("CO2 value present"),
  F("Min valve speed low AreaFlow"),
  F("Min. valve speed high AreaFlow"),
  F("CO2 value vent. 100% valve low"),
  F("CO2 value Vent. 100% valve high"),
  F("Max speed change CO2 control"),
  F("CO2 period time"),
  F("CO2 change rising"),
  F("CO2 change decreasing CO2"),
  F("CO2 change constant CO2"),
  F("Blocking time fan speed"),
  F("Blocking time maximum duration"),
  F("Stop blocking time at low demand"),
  F("Max. speed change CO2 reg. Blocking time"),
  F("CO2 increase start of blocking time"),
  F("Max speed up during disabling time"),
  F("Manual operation"),
  F("Manual operation speed"),
  F("Dew point at which RV-IC heater should start"),
  F("Dew point at which the RV-IC heater should stop"),
  F("Minimum time the RV-IC heater is on"),
  F("Maximum time to run the RV-IC heater"),
  F("RH sensor found_available"),
  F("Fan level to which it will go when the RH control switches on"),
  F("Minimum time for fan to go high in RH control"),
  F("Remote RH sensor overrides internal or not"),
  F("Sampling time of the RH and temperature measurement"),
  F("Hysteresis RH before going back to normal operation"),
  F("Rise in absolute humidity (X mg_kg) at which it goes high"),
  F("Hysteresis X before returning to normal operation"),
  F("Maximum time to remain in high by RH control"),
  F("0 = ventilation request wired sensor is ignored, 1 = ventilation request wired sensor is honored"),
  F("Measurement interval wired RH sensor"),
  F("Measurement storage interval to determine delta’s"),
  F("Maximum ventilation demand"),
  F("Minimum level to start wet room control"),
  F("Maximum level wet room control"),
  F("Always start ventilation above this value"),
  F("Stop ventilation below this value"),
  F("Detection level fast increase of humidity"),
  F("Minimum time demand is send"),
  F("Absolute RH percentage"),
  F("RH assumed constant when variation is less than this value"),
  F("Time to detect constant RH"),
  F("Stop ventilation below this value"),
  F("Configuration setting 1: 0 = no control performed, 1 = bathroom, 2 = wet room."),
  F("User setting 1: 1 = interval => 1 * number, 2 = 2 * etc."),
  F("Min. Fan setpoint at valve high and PIR"),
  F("CO2 concentration at 100% valve high and PIR"),
  F("Max speed change per minute"),
  F("Expiration time PIR present"),
  F("Period time"),
  F("Stabilization period"),
  F("Manual control"),
  F("Speed with manual operation"),
  F("Speed when absence"),
  F("Min. Fan setpoint BaseFlow available"),
  F("heatrae")
};

const __FlashStringHelper *ihtoDemandFlowSettingsDescriptions[] =
{
    F("min flow eco hood"),
    F("min flow eco kitchen"),
    F("min flow eco toilet"),
    F("min flow eco living room 1"),
    F("min flow eco living room 2"),
    F("min flow eco laundry room"),
    F("min flow eco bathroom"),
    F("min flow eco bathroom toilet"),
    F("Min flow eco storage bedroom"),
    F("Min flow eco bedroom 1"),
    F("Min flow eco bedroom 2"),
    F("min flow eco bedroom 3"),
    F("min flow comfort extractor hood"),
    F("min flow comfort kitchen"),
    F("min flow comfort toilet"),
    F("min flow comfort living room 1"),
    F("min flow comfort living room 2"),
    F("min flow comfort laundry room"),
    F("min flow comfort bathroom"),
    F("min flow comfort bathroom toilet"),
    F("min flow comfort storage bedroom"),
    F("min flow comfort bedroom 1"),
    F("Min flow comfort bedroom 2"),
    F("Min flow comfort bedroom 3"),
    F("max flow"),
    F("measuring interval"),
    F("rlv start rise"),
    F("rlv start period"),
    F("rlv stop offset"),
    F("rlv stop period"),
    F("rlv stop differential"),
    F("min time increment"),
    F("differential flow measurement"),
    F("fixed flow kitchen"),
    F("fixed flow bathroom"),
    F("Zeta value hose Extractor hood"),
    F("Zeta value hose kitchen"),
    F("Zeta value hose toilet"),
    F("Zeta value hose living room 1"),
    F("Zeta value hose living room 2"),
    F("Zeta value hose laundry room"),
    F("Zeta value hose bathroom"),
    F("Zeta value hose bathroom toilet"),
    F("Zeta value hose bedroom storage room"),
    F("Zeta value bedroom 1"),
    F("Zeta value bedroom 2"),
    F("Zeta value bedroom 3"),
    F("Zeta value other"),
    F("Zeta value plenum"),
    F("Valve Constant 1"),
    F("Valve constant 2"),
    F("P factor flow"),
    F("I factor flow"),
    F("d_factor flow"),
    F("Runtime of Valve"),
    F("max flow during timer"),
    F("Co2 setpoint eco extractor hood"),
    F("Co2 setpoint eco kitchen"),
    F("Co2 setpoint eco toilet"),
    F("Co2 setpoint eco living room 1"),
    F("Co2 setpoint eco living room 2"),
    F("Co2 setpoint eco laundry room"),
    F("Co2 setpoint eco bathroom"),
    F("Co2 setpoint eco bathroom toilet"),
    F("Co2 setpoint eco bedroom storage"),
    F("Co2 setpoint eco bedroom 1"),
    F("Co2 setpoint eco bedroom 2"),
    F("Co2 setpoint eco bedroom 3"),
    F("Co2 setpoint comfort Extractor hood"),
    F("Co2 setpoint comfort kitchen"),
    F("Co2 setpoint comfort toilet"),
    F("Co2 setpoint comfort living room 1"),
    F("Co2 setpoint comfort living room 2"),
    F("Co2 setpoint comfort laundry room"),
    F("Co2 setpoint comfort bathroom"),
    F("Co2 setpoint comfort bathroom toilet"),
    F("Co2 setpoint comfort bedroom storage room"),
    F("Co2 setpoint comfort bedroom 1"),
    F("Co2 setpoint comfort bedroom 2"),
    F("Co2 setpoint comfort bedroom 3"),
    F("OEM number"),
    F("Reverse direction of valves"),
    F("now_1"),
    F("now_2"),
    F("now_3"),
    F("now_4"),
    F("valve on manual control"),
    F("manual control valve 1"),
    F("manual control valve 2"),
    F("manual control valve 3"),
    F("manual control valve 4"),
    F("manual control valve 5"),
    F("manual control valve 6"),
    F("manual control valve 7"),
    F("manual control valve 8"),
    F("manual control valve 9"),
    F("manual control valve 10"),
    F("manual control valve 11"),
    F("manual control valve 12"),
    F("now_5"),
    F("CO2 calibration value"),
    F("speedFan"),
    F("offsetValve"),
    F("CO2MaxMeasureDifference"),
    F("GIW flow hood"),
    F("GIW flow kitchen"),
    F("GIW flow toilet"),
    F("GIW living room1"),
    F("GIW living room2"),
    F("GIW flow laundry room"),
    F("GIW flow bathroom"),
    F("GIW flow bath_toilet"),
    F("GIW bedroom storage"),
    F("GIW bedroom2"),
    F("GIW bedroom3"),
    F("GIW bedroom4"),
    F("ExtraStep valve"),
    F("FlowCalibration"),
    F("TimeCalibration"),
    F("maxFlow_hood_eco"),
    F("maxFlow_Kitchen_eco"),
    F("maxFlow_Wetting room_co"),
    F("maxFlow_Rooms1_eco"),
    F("maxFlow_Room2_eco"),
    F("maxFlow_laundry_room_eco"),
    F("MaxFlow_Bathroom_eco"),
    F("MaxFlow_Bathroom_toilet_eco"),
    F("maxFlow_bedroom_storage_eco"),
    F("maxFlow_bedroom1_eco"),
    F("maxFlow_bedroom2_eco"),
    F("maxFlow_bedroom3_eco"),
    F("maxflow_Hood_Comfort"),
    F("maxflow_Kitchen_Comfort"),
    F("maxflow_Toilet_Comfort"),
    F("maxflow_Living room1_comfort"),
    F("maxflow_Living room2_comfort"),
    F("maxflow_Washing room_comfort"),
    F("Maxflow_Bathroom_comfort"),
    F("Maxflow_Bathroom_toilet_comfort"),
    F("maxflow_Bedroom_Storage_comfort"),
    F("maxflow_bedroom1_comfort"),
    F("maxflow_bedroom2_comfort"),
    F("maxflow_bedroom3_comfort"),
    F("t_period_comfort"),
    F("tBinding"),
    F("flow_RFT_Low"),
    F("flow_RFT_High"),
    F("PIR_waiting time short"),
    F("PIR_waiting time long"),
    F("flow_PIR_Toilet"),
    F("flow_PIR_other_short"),
    F("flow_PIR_other_long"),
    F("Post run time_PIR_toilet"),
    F("Post run time_PIR_Other"),
    F("ECO_ComfortMode"),
    F("StartCO2Conc"),
    F("StopCO2Conc"),
    F("Level_RV_Middle"),
    F("Level_RV_High"),
    F("Flow_RV_middle"),
    F("Flow_RV_High"),
    F("RV_Switchediff"),
    F("MinFlow_RV_Eco"),
    F("MinFlow_RV_Comfort"),
    F("maxFlow_PID"),
    F("pidDamping"),
    F("SpeedInletFanManual"),
    F("SpeedOutletFanManual"),
    F("Exhaust hood flow control"),
    F("Correction flow control kitchen"),
    F("Correction Flow Control Toilet"),
    F("Correction Flow Control Living Room1"),
    F("Correction Flow Control Living Room2"),
    F("Correction Flow Control Living Room2"),
    F("Correction Flow Control Bathroom"),
    F("Correction Flow Control Bath_WC"),
    F("Correction Flow Control Bedroom Storage"),
    F("Correction Flow Control Bedroom2"),
    F("Correction Flow Control Bedroom3"),
    F("Correction Flow Control Bedroom4"),
    F("Level_RV_middle_laundry room"),
    F("Level_RV_high_laundry room"),
    F("flow_RV_middle_washing room"),
    F("flow_RV_high_washing room"),
    F("time_PIR_other_low"),
    F("Time_PIR_Other_High"),
    F("timeInitializationInterval"),
    F("StepMotorPulseLengthFactor"),
    F("StepsLowFrequency"),
    F("measurementIntervalSample"),
    F("maxDifferenceCO2Samples"),
    F("minFlowFixedTimer"),
    F("filterFactorRV"),
    F("minTimeSetpoint"),
    F("maxDifferenceCO2SamplesRefMode"),
    F("time_valve_calibration"),
    F("maxDifferenceCO2SamplesRefMode"),
    F("Constant CA2 Exhaust2) "),
    F("Constant CA1 Exhaust2) "),
    F("Constant CA0 Exhaust2) "),
    F("Constant CB2 Exhaust2) "),
    F("Constant CB1 Exhaust2) "),
    F("Constant CB0 Exhaust2) "),
    F("Constant CC2 Exhaust2) "),
    F("Constant CC1 Exhaust2) "),
    F("Constant CC0 Exhaust2) "),
    F("Constant CA2 Inlet2) "),
    F("Constant CA1 Inlet2) "),
    F("Constant CA0 Inlet2) "),
    F("Constant CB2 Inlet2) "),
    F("Constant CB1 Inlet2) "),
    F("Constant CB0 Inlet2) "),
    F("Constant CC2 Inlet2) "),
    F("Constant CC1 Inlet2) "),
    F("Constant CC0 Inlet2) "),
    F("relativeMinSpeed Exhaust"),
    F("minRelativeMinSpeed Exhaust"),
    F("absoluteMinSpeed Exhaust"),
    F("relativeMaxSpeed Exhaust"),
    F("maxRelativeMaxSpeed Exhaust"),
    F("absoluteMaxSpeed Exhaust"),
    F("relativeMinSpeed Inlet"),
    F("minRelativeMinSpeed Inlet"),
    F("absoluteMinSpeed Inlet"),
    F("relativeMaxSpeed Inlet"),
    F("maxRelativeMaxSpeed Inlet"),
    F("absoluteMaxSpeed Inlet"),
    F("Zeta Inlet"),
    F("rvLevelStart"),
    F("rvLevelStop"),
    F("pFactorFlowmin"),
    F("pFactorFlowmax")
};    

const __FlashStringHelper *ihtoHRUecoFanSettingsDescriptions[] =
{
    F("Nominal speed"),
    F("Temp frost protection"),
    F("frost temp offset"),
    F("min frost speed"),
    F("max frost speed"),
    F("frost supply fan off time"),
    F("frost supply fan on time"),
    F("frost speed change"),
    F("frostvalve speed change"),
    F("max ratio exhaust - supply during frost protection"),
    F("summer temp"),
    F("summer day time"),
    F("wanted temp bypass regulation"),
    F("offset bypass regulation"),
    F("max bypass open time"),
    F("max rpm fast var. Pwm"),
    F("max rpm slow var. Pwm"),
    F("max rpm fast fixed pwm"),
    F("speed offset"),
    F("high frequency var pwm"),
    F("low frequency var pwm"),
    F("high frequency fixed pwm"),
    F("low frequentie fixed pwm"),
    F("start speed vkk exhaust fan"),
    F("vkk valve close time"),
    F("rpm exhaust fan with min position potmeter low"),
    F("rpm supply fan with min position potmeter low"),
    F("rpm exhaust fan with max position potmeter low"),
    F("rpm supply fan with max position potmeter low"),
    F("rpm exhaust fan with vkk with min position potmeter low"),
    F("rpm supply fan with vkk with min position potmeter low"),
    F("rpm exhaust fan with vkk with max position potmeter low"),
    F("rpm supply fan with vkk with max position potmeter low"),
    F("rpm exhaust fan with min position potmeter high"),
    F("rpm supply with min. Position potmeter high"),
    F("rpm exhaust fan with max position potmeter high"),
    F("rpm supply fan with max position potmeter high"),
    F("stop both motors with motor fault"),
    F("correction rpm with min rpm during bypass"),
    F("correction rpm with max.rpm during bypass"),
    F("type of heat exchanger"),
    F("manual operation"),
    F("manual speed supply fan"),
    F("manual speed exhaust fan"),
    F("manual valve position"),
    F("supply fan of during vkk test"),
    F("OEM Value"),
    F("Summer temp GHE"),
    F("Air Quality"),
    F("Filter live time"),
    F("Filter counter"),
    F("Exhaust_Constant_Ca2"),
    F("Exhaust_Constant_Ca1"),
    F("Exhaust_Constant_Ca0"),
    F("Exhaust_Constant_Cb2"),
    F("Exhaust_Constant_Cb1"),
    F("Exhaust_Constant_Ca0"),
    F("Exhaust_Constant_Cc2"),
    F("Exhaust_Constant_Cc1"),
    F("Exhaust_Constant_Cc0"),
    F("Supply_Constant_Ca2"),
    F("Supply_Constant_Ca1"),
    F("Supply_Constant_Ca0"),
    F("Supply_Constant_Cb2"),
    F("Supply_Constant_Cb1"),
    F("Supply_Constant_Ca0"),
    F("Supplyt_Constant_Cc2"),
    F("Supply_Constant_Cc1"),
    F("Supply_Constant_Cc0"),
    F("frostTimer"),
    F("startupCounter"),
    F("boilerTestTimer"),
    F("summerCounter"),
    F("bypassTimer"),
    F("maimumOpenCounter"),
    F("filterUsagePerMin"),
    F("balance"),
    F("rpm exhaust fan with max position potmeter low"),
    F("rpm exhaust fan with vkk with min position potmeter low"),
    F("rpm exhaust fan with vkk with max position potmeter low"),
    F("rpm exhaust fan with min position potmeter high"),
    F("rpm exhaust fan with max position potmeter high"),
    F("min rpm supply fan"),
    F("max rpm supply fan"),
    F("min value balance setting"),
    F("max value balance setting"),
    F("min zeta supply value"),
    F("max zeta supply value")
};    

const __FlashStringHelper *ihtoHRU350SettingsDescriptions[] =
{
    F("Nominal speed position 2"),
    F("Frost protection set point"),
    F("Frost protection offset"),
    F("Minimum frost speed"),
    F("Maximum frost speed"),
    F("Frost supply off period"),
    F("Frost supply on period"),
    F("Frost speed change rate"),
    F("Valve speed change rate"),
    F("Valve open speed"),
    F("Summer temp"),
    F("Summer temp ground heat exchanger"),
    F("Summer temp hours"),
    F("Bypass temperature"),
    F("Bypass temperature offset"),
    F("Bypass Max open time"),
    F("Max variable low speed"),
    F("Max variable high speed"),
    F("Max fixed low speed"),
    F("Offset speed"),
    F("Variable PWM low freq"),
    F("Variable PWM high freq"),
    F("Fixed low PWM steering freq"),
    F("Fixed high PWM steering freq"),
    F("VKK test initial speed"),
    F("VKK test valve close time"),
    F("Min Minimum RPM Exhaust"),
    F("Max Minimum RPM Exhaust"),
    F("Min Minimum RPM VKK Exhaust"),
    F("Max Minimum RPM VKK Exhaust"),
    F("Min Maximum RPM Exhaust"),
    F("Max Maximum RPM Exhaust"),
    F("Min RPM Supply"),
    F("Max RPM Supply"),
    F("Min Balance Supply_Exhaust"),
    F("Max Balance Supply_Exhaust"),
    F("Min Zeta Supply"),
    F("Max Zeta Supply"),
    F("Stop both motors at motor failure"),
    F("Bypass Correction at 850 RPM"),
    F("Bypass Correction at 3150 RPM"),
    F("HRU version"),
    F("OEM Add-on filter"),
    F("Supply fan off during VKK"),
    F("Manual operation"),
    F("Manual speed supply fan"),
    F("Manual speed exhaust fan"),
    F("Manual valve position"),
    F("Filter Air quality"),
    F("Default filter life time"),
    F("Filter usage counter"),
    F("Exhaust Constant CA2"),
    F("Exhaust Constant CA1"),
    F("Exhaust Constant CA0"),
    F("Exhaust Constant CB2"),
    F("Exhaust Constant CB1"),
    F("Exhaust Constant CB0"),
    F("Exhaust Constant CC2"),
    F("Exhaust Constant CC1"),
    F("Exhaust Constant CC0"),
    F("Supply Constant CA2"),
    F("Supply Constant CA1"),
    F("Supply Constant CA0"),
    F("Supply Constant CB2"),
    F("Supply Constant CB1"),
    F("Supply Constant CB0"),
    F("Supply Constant CC2"),
    F("Supply Constant CC1"),
    F("Supply Constant CC0"),
    F("PIR level 1"),
    F("PIR level 2"),
    F("PIR level 1 wait time"),
    F("PIR level 2 wait time"),
    F("PIR run-on level 1"),
    F("PIR run-on level 2"),
    F("Min ventilation level"),
    F("Max time High speed"),
    F("Max time other speeds"),
    F("Fallback previous speeds"),
    F("poorCo2Quality"),
    F("goodCo2Quality"),
    F("Inhabitants"),
    F("Night min vent speed 1 person"),
    F("Night min vent speed 2 persons"),
    F("Night min vent speed 3 or more persons"),
    F("frostTime"),
    F("startupCounte"),
    F("boilerTestTime"),
    F("summerCounte"),
    F("bypassTimer"),
    F("maximumOpenCounter"),
    F("filterUsagePerMin"),
    F("balance"),
    F("Number of floors"),
    F("Min ventilation level multi-floor"),
    F("Min ventilation level one-floor"),
    F("Night min vent optima 1 multi-floor 1 person"),
    F("Night min vent optima 1 multi-floor 2 persons"),
    F("Night min vent optima 1 multi-floor >3 persons"),
    F("Night min vent optima 1 one-floor 1 person"),
    F("Night min vent optima 1 one-floor 2 persons"),
    F("Night min vent optima 1 one-floor >3 persons"),
    F("Night min vent optima 2 multi-floor 1 person"),
    F("Night min vent optima 2 multi-floor 2 persons"),
    F("Night min vent optima 2 multi-floor >3 persons"),
    F("Night min vent optima 2 one-floor 1 person"),
    F("Night min vent optima 2 one-floor 2 persons"),
    F("Night min vent optima 2 one-floor >3 persons"),
    F("Summer night boost enable"),
    F("Summer night degree"),
    F("Summer night setpoint"),
    F("Summer night boost ventilation level"),
    F("Summer night max area degree hours")
};    

const __FlashStringHelper *ihtoCVEStatusLabels[] =
{
  F("VentLevel"),
  F("FanSetp"),
  F("FanSpeed"),
  F("Error"),
  F("Selection"),
  F("StartUpCounter"),
  F("OperatingHours"),
  F("AwayTimer"),
  F("CO2"),
  F("hRFspeedLevel"),
  F("RelativeHumidity"),
  F("Temperature"),
  F("CO2speed"),
  F("klep"),
  F("zone"),
  F("sampletim"),
  F("sensorfault"),
  F("humidity"),
  F("temperature"),
  F("selectop"),
  F("enhbath"),
  F("counterstop"),
  F("countermintime"),
  F("ventreq"),
  F("storeactual"),
  F("storeprevfirst"),
  F("storeprevsec"),
  F("DelayAwayTimer"),
  F("perstim"),
  F("hRFspeedAbs"),
  F("nxtHrfSpeedLevel"),
  F("HspeedTimer"),
  F("NewLevelTime"),
  F("co2tim")
};

const __FlashStringHelper *ihtoHRUecoFanStatusLabels[] =
{
    F("supply fan"),
    F("supply fan rpm"),
    F("supply fan actual"),
    F("exhaust fan"),
    F("exhaust fan rpm"),
    F("exhaust fan actual"),
    F("supply temp"),
    F("exhaust temp"),
    F("Status"),
    F("Roomtemp"),
    F("Outdoortemp"),
    F("Valve position"),
    F("Bypass position"),
    F("Summercounter"),
    F("Summerday"),
    F("Frosttimer"),
    F("Boilertimer"),
    F("Startup counter"),
    F("Current position"),
    F("Ventilation Boiler Connection"),
    F("Ground Heat Exchanger"),
    F("Airfilter counter")
};    

const __FlashStringHelper *ihtoHRU350StatusLabels[] =
{
  F("ReqFanspeed"),
  F("Balance"),
  F("supply_fan_requested"),
  F("supply_fan_actual"),
  F("exhaust_fan_requested"),
  F("exhaust_fan_actual"),
  F("supplyTemp"),
  F("exhaustTemp"),
  F("status"),
  F("RoomTemp"),
  F("OutdoorTemp"),
  F("Valve_position"),
  F("Bypass_position"),
  F("Summercounter"),
  F("Summerday"),
  F("FrostTimer"),
  F("BoilTimer"),
  F("StartCounter"),
  F("CurPosition"),
  F("VKKswitch"),
  F("GroundHeatExchangerSwitch"),
  F("AirCounter"),
  F("Global_fault_code"),
  F("Actual_Mode"),
  F("pir_fan_speed_level"),
  F("Highest_received_CO2_value"),
  F("Highest_received_RH_value"),
  F("Air_Quality"),
  F("Remaining_override_timer"),
  F("Fallback_speed_timer")
};

const __FlashStringHelper *ihtoDemandFlowStatusLabels[] =
{
    F("Status"),
    F("Setpoint"),
    F("Humidity 1"),
    F("Humidity 2"),
    F("Exhaust Fan speed"),
    F("CO2 in plenum"),
    F("Calculated Co2 valve 1"),
    F("Calculated Co2 valve 2"),
    F("Calculated Co2 valve 3"),
    F("Calculated Co2 valve 4"),
    F("Calculated Co2 valve 5"),
    F("Calculated Co2 valve 6"),
    F("Calculated Co2 valve 7"),
    F("Calculated Co2 valve 8"),
    F("Calculated Co2 valve 9"),
    F("Calculated Co2 valve 10"),
    F("Calculated Co2 valve 11"),
    F("Calculated Co2 valve 12"),
    F("Fault"),
    F("SomCO2"),
    F("Samples"),
    F("State"),
    F("innerstate"),
    F("ControlMode"),
    F("Calculated position valve 1"),
    F("Calculated position valve 2"),
    F("Calculated position valve 3"),
    F("Calculated position valve 4"),
    F("Calculated position valve 5"),
    F("Calculated position valve 6"),
    F("Calculated position valve 7"),
    F("Calculated position valve 8"),
    F("Calculated position valve 9"),
    F("Calculated position valve 10"),
    F("Calculated position valve 11"),
    F("Calculated position valve 12"),
    F("1: Calculated flow afzuigkap"),
    F("2: Calculated flow keuken"),
    F("3: Calculated flow toilet"),
    F("4: Calculated flow woonkamer"),
    F("5: Calculated flow woonkamer"),
    F("6: Calculated flow wasruimte"),
    F("7: Calculated flow badkamer"),
    F("8: Calculated flow bad_toilet"),
    F("9: Calculated flow slaap_berging"),
    F("10: Calculated flow slaapkamer 1"),
    F("11: Calculated flow slaapkamer 2"),
    F("12: Calculated flow slaapkamer 3"),
    F("MotorPos1"),
    F("KlepP1"),
    F("KlepP2"),
    F("KlepP3"),
    F("KlepP4"),
    F("KlepP5"),
    F("KlepP6"),
    F("KlepP7"),
    F("KlepP8"),
    F("KlepP9"),
    F("KlepP10"),
    F("KlepP11"),
    F("KlepP12"),
    F("Measure interval"),
    F("Cooker hood"),
    F("High bathroom 1"),
    F("High bathroom 2"),
    F("3_6_9 hour timer"),
    F("CO2 measure"),
    F("OperatingMode"),
    F("Operating phase IBS"),
    F("Humidity 3"),
    F("Humidity 4"),
    F("Humidity 5"),
    F("Humidity 6"),
    F("Humidity 7"),
    F("Humidity 8"),
    F("Humidity 9"),
    F("Humidity 10"),
    F("Humidity 11"),
    F("Humidity 12"),
    F("Supply fan speed"),
    F("onStatusNormal"),
    F("onStatusHighKitchen"),
    F("onStatusHighBathroom"),
    F("onStatusHighKitchenBathroom"),
    F("onStatusTimer"),
    F("onStatusManualControl"),
    F("onStatusMeasureMode"),
    F("onStatusEcoComfort"),
    F("onStatusLimited-Ventilation"),
    F("onStatusNotHome"),
    F("Calculated CO2 value"),
    F("Measurement method"),
    F("Flow adjusted")
};    
static const std::map<uint8_t, const char*> fanInfo = {
  {0x00, "off"},
  {0X01, "low"},
  {0X02, "medium"},
  {0X03, "high"},
  {0X04, "speed 4"},
  {0X05, "speed 5"},
  {0X06, "speed 6"},
  {0X07, "speed 7"},
  {0X08, "speed 8"},
  {0X09, "speed 9"},
  {0X0A, "speed 10"},
  {0X0B, "timer 1"},
  {0X0C, "timer 2"},
  {0X0D, "timer 3"},
  {0X0E, "timer 4"},
  {0X0F, "timer 5"},
  {0X10, "timer 6"},
  {0X11, "timer 7"},
  {0X12, "timer 8"},
  {0X13, "timer 9"},
  {0X14, "timer 10"},
  {0X15, "away"},
  {0X16, "absolute minimum"},
  {0X17, "absolute maximum"},
  {0x18, "auto"},
  {0x18, "night"},
  {0xFF, "unknown"}
};

const std::map<uint8_t, const char*> fanSensorErrors = {
  {0xEF, "not available"},
  {0XF0, "shorted sensor"},
  {0XF1, "open sensor"},
  {0XF2, "not available error"},
  {0XF3, "out of range high"},
  {0XF4, "out of range low"},
  {0XF5, "not reliable"},
  {0XF6, "reserved error"},
  {0XF7, "reserved error"},
  {0XF8, "reserved error"},
  {0XF9, "reserved error"},
  {0XFA, "reserved error"},
  {0XFB, "reserved error"},
  {0XFC, "reserved error"},
  {0XFD, "reserved error"},
  {0XFE, "reserved error"},
  {0XFF, "unknown error"}
};

const std::map<uint8_t, const char*> fanSensorErrors2 = {
  {0x7F, "not available"},
  {0xEF, "not available"},
  {0X80, "shorted sensor"},
  {0X81, "open sensor"},
  {0X82, "not available error"},
  {0X83, "out of range high"},
  {0X84, "out of range low"},
  {0X85, "not reliable"},
  {0XFF, "unknown error"}
};

const std::map<uint8_t, const char*> fanHeatErrors = {
  {0xEF, "not available"},
  {0XF0, "open actuato"},
  {0XF1, "shorted actuato"},
  {0XF2, "not available error"},
  {0XFF, "unknown error"}
};
